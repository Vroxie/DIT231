PDefs.  Program ::= [Def] ;

terminator Def "";

comment "//" ;
comment "/*" "*/";
comment "#";

DFun.       Def  ::= Type Id "(" [Arg] ")" "{" [Stm] "}" ;
DFunQ.      Def  ::= Qual Id "(" [Arg] ")" "{" [Stm] "}";
DFunc.      Def  ::= Type Id "(" [Arg] ")" ";";
--DFuncQ.     Def  ::= Qual Id "(" [Arg] ")" ";";
DUsing.     Def  ::= "using " Qual ";";
DTypdef.    Def  ::= TDef";";
DDecl.      Def  ::= Type Id ";";
DDecls.     Def  ::= Type Id "," [Id] ";";
DInit.      Def  ::= Type Id "=" Exp ";" ;

separator Arg "," ;

ADecl.          Arg  ::= Type Id ;
ADeclT.         Arg  ::= Type;
--AQconst.        Arg  ::= Qual Id;
--AQ.             Arg  ::= Qual;
--AVarwithId.     Arg  ::= Var Id;
--AVar.           Arg  ::= Var;




SExp.       Stm  ::= Exp ";";

SDecl.      Stm  ::= Type Id ";";
--SQDecl.     Stm  ::= Qual Id ";"; 
SDecls.     Stm  ::= Type Id "," [Id] ";";
--SQDecls.    Stm  ::= Qual Id "," [Id] ";";
SInit.      Stm  ::= Type Id "=" Exp ";" ;

SWhile.     Stm  ::= "while" "(" Exp ")" Stm;
SDoWhile.   Stm  ::= "do" Stm "while" "(" Exp ")" ";";
SFor.       Stm  ::= "for" "(" Type Id "=" Stm  Exp ";"Exp ")" Stm;
--SForQ.      Stm  ::= "for" "(" Qual Id ";" Exp ";"Exp ")" Stm;
--SForQIn.    Stm  ::= "for" "(" Qual Id "=" Stm  Exp ";"Exp ")" Stm;
--SForVar.    Stm  ::= "for" "(" Var Id "=" Stm  Exp ";"Exp ")" Stm;
SBlock.     Stm  ::= "{" [Stm] "}";
SIf.        Stm  ::= "if" "(" Exp ")" Stm;
SIfElse.    Stm  ::= "if" "(" Exp ")" Stm "else" Stm;
SReturn.    Stm  ::= "return" Exp ";";
STypedef.   Stm  ::= TDef";";

separator Stm ""; 

EInt.       Exp15 ::= Integer;
EString.    Exp15 ::= [String];
EChar.      Exp15 ::= Char;
EDouble.    Exp15 ::= Double;
--EId.      Exp15 ::= Id;
EIndex.     Exp14 ::= Exp15"["Exp11"]";
EPlus.      Exp11 ::= Exp11 "+" Exp12;
EMul.       Exp12 ::= Exp12 "*" Exp13;
EMinus.     Exp11 ::= Exp11 "-" Exp12;
EDiv.       Exp12 ::= Exp12 "/" Exp13;
EModulo.    Exp12 ::= Exp12 "%" Exp13;
EqConst.    Exp15 ::= Qual;
EqConstId.  Exp15 ::= Qual Id;
--EVar.       Exp15 ::= Var;
--EVarId.     Exp15 ::= Var Id;
ENot.       Exp13 ::= "!" Exp14;
EIncrR.     Exp14 ::= "++" Exp15;
EIncrL.     Exp14 ::= Exp15 "++";
EDecrR.     Exp14 ::= "--" Exp15;
EDecrL.     Exp14 ::= Exp15 "--";
EPointstar. Exp14 ::= "*" Exp15;
EOut.       Exp10 ::= Exp10 "<<" Exp11;
EIn.        Exp10 ::= Exp10 ">>" Exp11;
ECompLeft.  Exp9  ::= Exp9 ">" Exp10;
EComRight.  Exp9  ::= Exp9 "<" Exp10;
ELEq.       Exp9  ::= Exp9 ">=" Exp10;
EREq.       Exp9  ::= Exp9 "<=" Exp10;
ECall.      Exp15 ::= Id "(" [Exp] ")";
ECallobj.   Exp14 ::= Exp14 "." Exp15;
EEq.        Exp8  ::= Exp8 "==" Exp9;
ENotEq.     Exp8  ::= Exp8 "!=" Exp9;
EAnd.       Exp4  ::= Exp4 "&&" Exp5;
EPointer.   Exp5  ::= Exp5 "->" Exp6;
EOr.        Exp3  ::= Exp3 "||" Exp4;
EAss.       Exp2  ::= Exp3 "=" Exp2; 
EAssPlus.   Exp2  ::= Exp3 "+=" Exp2;
EAssMinus.  Exp2  ::= Exp3 "-=" Exp2;
ECond.      Exp2  ::= Exp3 "?" Exp1 ":" Exp2;
EThrow.     Exp1  ::= "throw" Exp1;

coercions Exp 15;
separator Exp ",";
separator nonempty String "";

Tint.     SubType ::= "int";
Tdouble.  SubType ::= "double";
Tbool.    SubType ::= "bool";
Tchar.    SubType ::= "char";
TPoint.   SubType ::= SubType [Ref];
TVoid.    SubType ::= "void";
TQ.       SubType ::= Qual;

Qualifer. Qual ::= Id "::" Qual;
Qtype.    Qual ::= Id;
--QconstP.  Qual ::= Qual [Ref];

ConstTypeVar. Type  ::= "const" SubType;
ConstType.    Type  ::= SubType;

Refen.        Ref   ::= "&";
separator nonempty Ref " ";

--TypeDefQ.     TDef ::= "typedef" Qual Id;
TypeDefT.     TDef ::= "typedef" Type Id;


token Id (letter (letter | digit | '_')*);



separator nonempty Id ",";