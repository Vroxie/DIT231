PDefs.  Program ::= [Def] ;

terminator Def "";

comment "//" ;
comment "/*" "*/";
comment "#";

DFun.       Def  ::= Type Id "(" [Arg] ")" "{" [Stm] "}" ;
DFunQ.      Def  ::= Qual Id "(" [Arg] ")" "{" [Stm] "}";
DFunc.      Def  ::= Type Id "(" [Arg] ")" ";";
DFuncQ.     Def  ::= Qual Id "(" [Arg] ")" ";";
DUsing.     Def  ::= "using " Qual ";";
DTypdef.    Def  ::= DefStm ";";

separator Arg "," ;

TypeDef.    DefStm  ::= "typedef" Type Id;
InitDef.    DefStm  ::= Type [Var];
InitQDef.   DefStm  ::= Qual Id "=" Exp;

VarQual.    Var ::= Qual;
VarAssign.  Var ::= Qual "=" Exp;


separator nonempty Var ",";


ADecl.          Arg  ::= Type Id ;
ADeclT.         Arg  ::= Type;

 
SExp.       Stm  ::= Exp ";";
SDef.       Stm  ::= DefStm ";";
SQDecls.    Stm  ::= Qual Id "," [Id] ";";
SWhile.     Stm  ::= "while" "(" Exp ")" Stm;
SDoWhile.   Stm  ::= "do" Stm "while" "(" Exp ")" ";";
SFor.       Stm  ::= "for" "(" Type Id "=" Stm  Exp ";"Exp ")" Stm;
SFor2.      Stm  ::= "for" "(" Type Id ";" Exp ";" Exp ")" Stm;
SBlock.     Stm  ::= "{" [Stm] "}";
SIf.        Stm  ::= "if" "(" Exp ")" Stm;
SIfElse.    Stm  ::= "if" "(" Exp ")" Stm "else" Stm;
SReturn.    Stm  ::= "return" Exp ";";

separator Stm ""; 

EInt.       Exp15 ::= Integer;
EString.    Exp15 ::= [String];
EChar.      Exp15 ::= Char;
EDouble.    Exp15 ::= Double;
EIndex.     Exp15 ::= Exp15"["Exp9"]";
EPlus.      Exp11 ::= Exp11 "+" Exp12;
EMul.       Exp12 ::= Exp12 "*" Exp13;
EMinus.     Exp11 ::= Exp11 "-" Exp12;
EDiv.       Exp12 ::= Exp12 "/" Exp13;
EModulo.    Exp12 ::= Exp12 "%" Exp13;
EqConst.    Exp15 ::= Qual;
EqConstId.  Exp15 ::= Qual Id;
ENot.       Exp13 ::= "!" Exp13;
EIncrR.     Exp13 ::= "++" Exp13;
EIncrL.     Exp14 ::= Exp14 "++";
EDecrR.     Exp13 ::= "--" Exp13;
EDecrL.     Exp14 ::= Exp14 "--";
EPointstar. Exp13 ::= "*" Exp13;
EOut.       Exp10 ::= Exp10 "<<" Exp11;
EIn.        Exp10 ::= Exp10 ">>" Exp11;
ECompLeft.  Exp9  ::= Exp9 ">" Exp10;
EComRight.  Exp9  ::= Exp9 "<" Exp10;
ELEq.       Exp9  ::= Exp9 ">=" Exp10;
EREq.       Exp9  ::= Exp9 "<=" Exp10;
ECall.      Exp15 ::= Exp15 "(" [Exp] ")";
ECallobj.   Exp14 ::= Exp14 "." Exp15;
EEq.        Exp8  ::= Exp8 "==" Exp9;
ENotEq.     Exp8  ::= Exp8 "!=" Exp9;
EAnd.       Exp4  ::= Exp4 "&&" Exp5;
EPointer.   Exp5  ::= Exp5 "->" Exp6;
EOr.        Exp3  ::= Exp3 "||" Exp4;
EAss.       Exp2  ::= Exp3 "=" Exp2; 
EAssPlus.   Exp2  ::= Exp3 "+=" Exp2;
EAssMinus.  Exp2  ::= Exp3 "-=" Exp2;
ECond.      Exp2  ::= Exp3 "?" Exp1 ":" Exp2;
EThrow.     Exp1  ::= "throw" Exp1;

coercions Exp 15;
separator Exp ",";
separator nonempty String "";

Tint.     SubType ::= "int";
Tdouble.  SubType ::= "double";
Tbool.    SubType ::= "bool";
Tchar.    SubType ::= "char";
TPoint.   SubType ::= SubType [Ref];
TVoid.    SubType ::= "void";
TQ.       SubType ::= Qual;

Qualifer. Qual ::= Id "::" Qual;
QI.       Qual ::= Id;

ConstTypeVar. Type  ::= "const" SubType;
ConstType.    Type  ::= SubType;

Refen.        Ref   ::= "&";
separator nonempty Ref " ";

token Id (letter (letter | digit | '_')*);



separator nonempty Id ",";
