PDefs.  Program ::= [Def] ;

terminator Def "";

comment "//" ;
comment "/*" "*/";
comment "#";

DFun.       Def  ::= Type Id "(" [Arg] ")" "{" [Stm] "}" ;
DFunQ.      Def  ::= Qual Id "(" [Arg] ")" "{" [Stm] "}";
DUsing.     Def  ::= "using " Qual ";";
DTypdef.    Def  ::= TDef";";

separator Arg "," ;

ADecl.          Arg  ::= Type Id ;
AQconst.        Arg  ::= Qual Id;
AQ.             Arg  ::= Qual;
AVarwithId.     Arg  ::= Var Id;
AVar.           Arg  ::= Var;


SExp.       Stm  ::= Exp ";";
SDecl.      Stm  ::= Type Id ";"; 
SDecls.     Stm  ::= Type Id "," [Id] ";";
SInit.      Stm  ::= Type Id "=" Exp ";" ;
SWhile.     Stm  ::= "while" "(" Exp ")" Stm;
SBlock.     Stm  ::= "{" [Stm] "}";
SIf.        Stm  ::= "if" "(" Exp ")" Stm;
SIfElse.    Stm  ::= "if" "(" Exp ")" Stm "else" Stm;
SReturn.    Stm  ::= "return" Exp ";";
STypedef.   Stm  ::= TDef";";

separator Stm ""; 

EInt.       Exp15 ::= Integer;
EString.    Exp15 ::= [String];
EChar.      Exp15 ::= Char;
--EId.      Exp15 ::= Id;
EIndex.     Exp14 ::= Exp15"["Exp11"]";
EPlus.      Exp11 ::= Exp11 "+" Exp12;
EMul.       Exp12 ::= Exp12 "*" Exp13;
EMinus.     Exp11 ::= Exp11 "-" Exp12;
EDiv.       Exp12 ::= Exp12 "/" Exp13;
EModulo.    Exp12 ::= Exp12 "%" Exp13;
EqConst.    Exp15 ::= Qual;
EqDecl.     Exp15 ::= Exp15 Id;
ENot.       Exp13 ::= "!" Exp14;
EOut.       Exp5  ::= Exp5 "<<" Exp4;
EIn.        Exp5  ::= Exp5 ">>" Exp4;
ECall.      Exp15 ::= Id "(" [Exp] ")";
ECallobj.   Exp14 ::= Exp14 "." Exp15;
EEq.        Exp7  ::= Exp8 "==" Exp7;
EAss.       Exp2  ::= Exp3 "=" Exp2;
ECond.      Exp2  ::= Exp3 "?" Exp1 ":" Exp2;
EThrow.     Exp1  ::= "throw" Exp15;

coercions Exp 15;
separator Exp ",";
separator nonempty String "";

Tint.     Type ::= "int";
Tdouble.  Type ::= "double";
Tbool.    Type ::= "bool";
Tchar.    Type ::= "char";
TPoint.   Type ::= Type "&";
TConst.   Type ::= "const" Type;
TVoid.    Type ::= "void";

Qualifer. Qual ::= Id "::" Qual;
Qtype.    Qual ::= Id;
QconstP.  Qual ::= Qual "&";

ConstVar.  Var  ::= "const" Qual;


TypeDef.     TDef ::= "typedef" Qual Id;


token Id (letter (letter | digit | '_')*);



separator nonempty Id ",";
